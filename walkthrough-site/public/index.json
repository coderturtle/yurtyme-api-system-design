[
{
	"uri": "https://coderturtle.github.io/yurtyme-api-system-design/pages/2020/overview/",
	"title": "High Level Solution",
	"tags": [],
	"description": "",
	"content": "Setup At a super high level there are 3 pieces to our system\n A PWA front-end A simple backend with an API and some persistent storage A Queing System  The Distributed Database can store the User and Bars Profiles (Name, Email, etc). Distributed Databases scale well as we add more users.\nThe In-Memory Database is used for fast lookups and updates. We can store two things here.\n  States of active Users and Bars.\n  User\u0026rsquo;s Location (for sending ETA to bars)\n  When a request comes in, it gets assigned to an App Server. We will make our REST API stateless so that any App Server can handle a request. This makes it easy to scale app servers by adding more machines.\nWhat happens when a user requests to join a queue When a user requests to join a queue, the app server sets the User to the REQUESTING state. It then sends a request to the Queing system to make a request to the bar.\nThe Queing System maintains a pool of available bars (WAITING state). It first sends a queing request to the selected bar. If this is rejected or the queue time is over a specified period, the system keeps sending requests to nearby bars until one accepts or we run out of nearby bars.\nIf the selected bar accepts the app server matches the user to the bars queue and sets the users status to Queing. This blocks the user from queing at any other nearby bars. It also notifies the bar that the user is in the virtual queue.\nIf, for whatever reason, the selected bar can\u0026rsquo;t accomodate the user but an alternative is found, the queing system responds to the app server with the bar info. This is sent to the user where they can either confirm they want to join that bars queue or reject it and search again.\nAt each state change, we inform the User/Bar of the change, so that the mobile UIs can be updated. With the notification, we also send any other info the device might need. For example, when the User is notified that he/she has been changed to the QUEING state, we also calculate the Queing Time and send that with the notification, so that the User\u0026rsquo;s device can display the Queue Time and alert when it\u0026rsquo;s time to physically go to the bar.\nWe use a similar flow for all our API requests. A Request goes to an App Server, and the App Server processes the request. This involves State Updates to the In Memory DB, Profile Updates to the NoSQL DB, Requests to/from the Queing System and notifying the Users/Bars of State changes.\n How is the do users know which bars have queue availability as they move around We need to periodically ping the User\u0026rsquo;s location for all active bars (drivers not in the QUEUE_FULL state). This can be part of the mobile application. The app can periodically call an HTTP handler with the users\u0026rsquo;s current location. This location is simply written to the In-Memory DB by App Servers. The location is also sent to the Queing System.\nThe Queing System needs to keep the User\u0026rsquo;s location updated. The Queing System finds bars near a user. It will store each active users\u0026rsquo;s location in a Spatial Index for such queries. Bars locations are stationary.\nAdditional Questions How do you know when a user finishes queing and enters the bar The System can verify the users and bar location is the same for a period longer than the queing time.\n"
},
{
	"uri": "https://coderturtle.github.io/yurtyme-api-system-design/pages/overview/",
	"title": "Overview",
	"tags": [],
	"description": "",
	"content": "So how is yurtyme going to save our users time?\nOur mission in 2014 was to use developing, state-of-the-art technology (smartphone inter-connectability, GPS, algorithmized big data, and the network effect), to create an application that combines historical and real-time information to provide accurate predictive data so a customer can minimize the time he/she spends waiting. Using the Waze application as our innovative inspiration, we believe we can develop our own use of social networking applications: to use real-time inputs from consumers and members to give fellow members information. The value of the “network effect” resonated in our group and we believe the use of its information sharing could be very influential on our business plan.\n"
},
{
	"uri": "https://coderturtle.github.io/yurtyme-api-system-design/pages/overview/requirements/",
	"title": "Requirements",
	"tags": [],
	"description": "",
	"content": " This is just a subset of some of the main features to knock out an initial system design.\n So what are our requirements for our backend.\n  A mobile friendly API to handle user interaction. For the moment this can be limited to\n Opening the app and seeing a list of places in a mile radious along with their current queue times The ability to virtually join a queue while not physically there Check-in to a venue when you join a queue Automatically update the wait time once you\u0026rsquo;ve entered the venue Receive Notications when you\u0026rsquo;re at or near the top of the queue    A queing system which matches a bar to a user\n  A Reporting API which can pull aggregated metrics for venues and users on things like\n Wait times How busy places are Peak times  An initial API spec can be found on Apiary\n  "
},
{
	"uri": "https://coderturtle.github.io/yurtyme-api-system-design/pages/2020/",
	"title": "2020 System Design Prototype",
	"tags": [],
	"description": "",
	"content": "Chapter 2 Designing the infrastructure for this API in 2020 In this section we\u0026rsquo;ll go through a sample infrastructure for the Yurtyme App in 2020 and talk through each of the main components.\n"
},
{
	"uri": "https://coderturtle.github.io/yurtyme-api-system-design/pages/2020/aws-design/",
	"title": "Potential AWS Implementation",
	"tags": [],
	"description": "",
	"content": "So lets ignore the reporting API for the moment and concentrate on the core part of the system. Using the AWS services available today what could our solution now look like?\nTo begin with, for an MVP, we could aim to go for a serverless solution. I\u0026rsquo;ll step into the details of front-end vs back-end in the subsequent sections and go into more detail on what each one does.\nFront End We could host our PWA as a static site in S3 and enforce SSL via a Cloudfront distribution. This would be a minimal cost upfront but would easily scale as our user base grew. It can also be made highly secure.\nBack End In 2014 we were in the era of ec2 so designing a back-end required configuring quite a lot of infrastructure and networking setup. Lets take the simplest solution available in 2020 and limit what infrastructure we need to operate and maintain.\nTo handle authentication of our API we can use API Gateway with custom authorizors. For our compute layer we can use lambdas. And for our sotrage we can use dynamoDB for persistent data and redis for in memory data. As DynamoDB is a noSQL DB it should scale as our user base grows. Similarly with lambda as we get more users and higher request throughput this should automatically scale up.\nBelow is a nice comparison diagram between the ec2 based reference model vs a serverless model.\n"
},
{
	"uri": "https://coderturtle.github.io/yurtyme-api-system-design/pages/2020/pwa/",
	"title": "PWA Front-end",
	"tags": [],
	"description": "",
	"content": " We could potentially build out the PWA using AWS Amplify - this may also be a quicker method to prototype an initial MVP to get in front of people. For this design however we won\u0026rsquo;t go this route.\n To start we don\u0026rsquo;t want the overhead of building out Native Applications on IOS and Android so will create a Progressive WebApp which gives us access to some of the device features without the overhead of multiple code bases. To host this we will host the site in S3 and distribute it via Cloudfront. The architecture for this can be seen below\n The viewer requests the website at www.example.com. If the requested object is cached, CloudFront returns the object from its cache to the viewer. If the object is not in CloudFront’s cache, CloudFront requests the object from the origin (an S3 bucket). S3 returns the object to CloudFront, which triggers the Lambda@Edge origin response event. The object, including the security headers added by the Lambda@Edge function, is added to CloudFront’s cache. (Not shown) The objects is returned to the viewer. Subsequent responses for the object are served from the CloudFront cache.  "
},
{
	"uri": "https://coderturtle.github.io/yurtyme-api-system-design/pages/2020/back-end/",
	"title": "Back End Design",
	"tags": [],
	"description": "",
	"content": " We could potentially build out the API using AWS AppSync - this may also be a quicker method to prototype an initial MVP to get in front of people. For this design however we won\u0026rsquo;t go this route.\n  Cognito User Pools are used to store valid users Api Gateway uses a lambda as a custom authorizor to authenticate users hitting the API Reads of real time data come from the Redis cache Requests are queued and workers pick them off as they are available. Example would be checking if a bars queue had open slots and if not pulling spatial index from Dynamo to get a list of nearby bars and calculating which ones to return to the user.  From a performance and cost perspective there are thresholds where lambda may no longer be the best solution. In this scenario we could potentially move our microservice layer to containers and run them on an ECS or EKS cluster. There is some extra overhead to this as we need to configure and maintain our clusters to ensure we have correct capacity and also need to make sure we have a container hydration strategy in place to keep our container images up to date.\n "
},
{
	"uri": "https://coderturtle.github.io/yurtyme-api-system-design/pages/2020/analytics/",
	"title": "Data Analytics",
	"tags": [],
	"description": "",
	"content": " Very rough initial design for an analytics piece of yurtyme which would plug into the previously described backend.\n We could have a read replica on our Dynamo Table which we stream fanout to and our eventbus. From here we could use Kinesis firehose to stream the data dump into S3. Athena could be used to run queries directly against S3 or we could first of all crawl the data using Glue and transform it into a more queryable data model.\n"
},
{
	"uri": "https://coderturtle.github.io/yurtyme-api-system-design/pages/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://coderturtle.github.io/yurtyme-api-system-design/pages/credits/",
	"title": "Credits",
	"tags": [],
	"description": "",
	"content": "This site is built on top of the Hugo Learn Theme.\nContributors Thanks to them for making Open Source Software a better place !\nAnd a special thanks to @vjeantet for his work on docdock, a fork of hugo-theme-learn. v2.0.0 of this theme is inspired by his work.\nPackages and libraries  mermaid - generation of diagram and flowchart from text in a similar manner as markdown font awesome - the iconic font and CSS framework jQuery - The Write Less, Do More, JavaScript Library lunr - Lunr enables you to provide a great search experience without the need for external, server-side, search services\u0026hellip; horsey - Progressive and customizable autocomplete component clipboard.js - copy text to clipboard highlight.js - Javascript syntax highlighter modernizr - A JavaScript toolkit that allows web developers to use new CSS3 and HTML5 features while maintaining a fine level of control over browsers that don\u0026rsquo;t support  Tooling  Hugo  "
},
{
	"uri": "https://coderturtle.github.io/yurtyme-api-system-design/pages/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://coderturtle.github.io/yurtyme-api-system-design/pages/",
	"title": "Yurtyme",
	"tags": [],
	"description": "",
	"content": "After he was diagnosed with pancreatic cancer, Steve Jobs gave a commencement address at Stanford University titled “How to Live before You Die.”\nIn that address, Steve Jobs concluded, “Your time is limited, so don\u0026rsquo;t waste it.. While Steve was specifically referencing “working for someone else,” this basic precept of not “wasting time” is salient.\nYur-Tyme was formed during the Fall of 2014, when a class titled Innovation, Entrepreneurship, and Business Transformation at the Harvard Extension School asked its students to put together an idea and develop an initiative towards pursuing their goals. During brainstorming sessions, our team concluded the greatest waste of time we encounter is waiting in line, so that became our problem to solve. We want to minimize the amount of time spent in waiting line “purgatory” to allow our users and members to increase the amount of time actually doing the things they set out to do!\nAt the time, I used all the latest and greatest cloud services to design the below backend for yurtyme\u0026hellip;\n6 years later and the technology landscape widely different how would I alter my approach?\n"
}]